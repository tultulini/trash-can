{"version":3,"sources":["../src/index.js"],"names":["filePath","__dirname","jwkFilePath","console","log","rawData","tokenData","JSON","parse","jwt","id_token","jwksBuffer","jwks","key","keys","pem","TokenValidationErrors","TokenExpiredError","validateToken","then","res","stringify","err","error","keyPem","length","Promise","reject","split","keyPart","dataPart","signaturePart","resolve","decoded"],"mappings":";;AACA;;AACA;;AACA;;AACA;;;;;;;;;;;;AACA,IAAMA,QAAQ,aAAMC,SAAN,8BAAd;AACA,IAAMC,WAAW,aAAMD,SAAN,4BAAjB;AACAE,OAAO,CAACC,GAAR,WAAeJ,QAAf,uBAAoC,oBAAWA,QAAX,CAApC;AACA,IAAMK,OAAO,GAAG,sBAAaL,QAAb,CAAhB;AACA,IAAMM,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWH,OAAX,CAAlB;AAEA,IAAMI,GAAG,GAAGH,SAAS,CAACI,QAAtB;AAEA,IAAMC,UAAU,GAAG,sBAAaT,WAAb,CAAnB;AACA,IAAMU,IAAI,GAAGL,IAAI,CAACC,KAAL,CAAWG,UAAX,CAAb;AACA,IAAME,GAAG,GAAGD,IAAI,CAACE,IAAL,CAAU,CAAV,CAAZ;AACA,IAAMC,GAAG,GAAG,0BAASF,GAAT,CAAZ;AACA,IAAMG,qBAAqB,GAAG;AAAEC,EAAAA,iBAAiB,EAAE;AAArB,CAA9B;AACAC,aAAa,CAACT,GAAD,EAAMM,GAAN,CAAb,CAAwBI,IAAxB,CAA6B,UAAAC,GAAG,EAAI;AAChCjB,EAAAA,OAAO,CAACC,GAAR,sBAA0BG,IAAI,CAACc,SAAL,CAAeD,GAAf,EAAoB,IAApB,EAA0B,IAA1B,CAA1B;AACH,CAFD,WAES,UAAAE,GAAG,EAAI;AACZnB,EAAAA,OAAO,CAACoB,KAAR,CAAcD,GAAd;AACH,CAJD;;AAMA,SAASJ,aAAT,CAAuBT,GAAvB,EAA4Be,MAA5B,EAAoC;AAChC,MAAI,CAACf,GAAD,IAAQA,GAAG,CAACgB,MAAJ,KAAe,CAA3B,EAA8B;AAC1B,WAAOC,OAAO,CAACC,MAAR,CAAe,OAAf,CAAP;AAEH;;AAJ+B,mBAMWlB,GAAG,CAACmB,KAAJ,CAAU,GAAV,CANX;AAAA;AAAA,MAMzBC,OANyB;AAAA,MAMhBC,QANgB;AAAA,MAMNC,aANM;;AAOhC,MAAI,CAACD,QAAD,IAAa,CAACC,aAAlB,EAAiC;AAC7B,WAAOL,OAAO,CAACC,MAAR,CAAe,YAAf,CAAP;AACH;;AAEDxB,EAAAA,OAAO,CAACC,GAAR,6CAAiDyB,OAAjD,iBAA+DC,QAA/D,iBAA8EC,aAA9E;AACA,SAAO,IAAIL,OAAJ,CAAY,UAACM,OAAD,EAAUL,MAAV,EAAqB;AACpC,8BAAOlB,GAAP,EAAYe,MAAZ,EAAoB,UAACF,GAAD,EAAMW,OAAN,EAAkB;AAClC,UAAIX,GAAJ,EAAS;AACLK,QAAAA,MAAM,CAACL,GAAD,CAAN;AACH,OAFD,MAGK;AACDU,QAAAA,OAAO,CAACC,OAAD,CAAP;AACH;AACJ,KAPD;AAQH,GATM,CAAP;AAYH","sourcesContent":["\r\nimport { stringify, parse, unescape } from 'querystring'\r\nimport { readFileSync, existsSync } from 'fs'\r\nimport { verify, JsonWebTokenError } from 'jsonwebtoken'\r\nimport jwkToPem from 'jwk-to-pem'\r\nconst filePath = `${__dirname}/../resources/tokens.json`\r\nconst jwkFilePath = `${__dirname}/../resources/jwks.json`\r\nconsole.log(`${filePath} exist--: ${existsSync(filePath)}`)\r\nconst rawData = readFileSync(filePath)\r\nconst tokenData = JSON.parse(rawData);\r\n\r\nconst jwt = tokenData.id_token\r\n\r\nconst jwksBuffer = readFileSync(jwkFilePath)\r\nconst jwks = JSON.parse(jwksBuffer)\r\nconst key = jwks.keys[0]\r\nconst pem = jwkToPem(key)\r\nconst TokenValidationErrors = { TokenExpiredError: \"TokenExpiredError\" }\r\nvalidateToken(jwt, pem).then(res => {\r\n    console.log(`jwt valid: ${JSON.stringify(res, null, '\\t')}`)\r\n}).catch(err => {\r\n    console.error(err)\r\n})\r\n\r\nfunction validateToken(jwt, keyPem) {\r\n    if (!jwt || jwt.length === 0) {\r\n        return Promise.reject(\"empty\")\r\n\r\n    }\r\n\r\n    const [keyPart, dataPart, signaturePart] = jwt.split(\".\")\r\n    if (!dataPart || !signaturePart) {\r\n        return Promise.reject(\"bad format\")\r\n    }\r\n\r\n    console.log(`keyPart, dataPart, signaturePart: ${keyPart}\\r\\n${dataPart}\\r\\n${signaturePart}`);\r\n    return new Promise((resolve, reject) => {\r\n        verify(jwt, keyPem, (err, decoded) => {\r\n            if (err) {\r\n                reject(err)\r\n            }\r\n            else {\r\n                resolve(decoded)\r\n            }\r\n        })\r\n    })\r\n\r\n\r\n}"],"file":"index.js"}